/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import type {} from "@payloadcms/db-sqlite";
import {
  sqliteTable,
  index,
  uniqueIndex,
  foreignKey,
  integer,
  text,
  numeric,
} from "@payloadcms/db-sqlite/drizzle/sqlite-core";
import { sql, relations } from "@payloadcms/db-sqlite/drizzle";

export const users_sessions = sqliteTable(
  "users_sessions",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: text("id").primaryKey(),
    createdAt: text("created_at").default(
      sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`,
    ),
    expiresAt: text("expires_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => ({
    _orderIdx: index("users_sessions_order_idx").on(columns._order),
    _parentIDIdx: index("users_sessions_parent_id_idx").on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [users.id],
      name: "users_sessions_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const users = sqliteTable(
  "users",
  {
    id: integer("id").primaryKey(),
    updatedAt: text("updated_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text("created_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    email: text("email").notNull(),
    resetPasswordToken: text("reset_password_token"),
    resetPasswordExpiration: text("reset_password_expiration").default(
      sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`,
    ),
    salt: text("salt"),
    hash: text("hash"),
    loginAttempts: numeric("login_attempts").default("0"),
    lockUntil: text("lock_until").default(
      sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`,
    ),
  },
  (columns) => ({
    users_updated_at_idx: index("users_updated_at_idx").on(columns.updatedAt),
    users_created_at_idx: index("users_created_at_idx").on(columns.createdAt),
    users_email_idx: uniqueIndex("users_email_idx").on(columns.email),
  }),
);

export const media = sqliteTable(
  "media",
  {
    id: integer("id").primaryKey(),
    alt: text("alt").notNull(),
    updatedAt: text("updated_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text("created_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    url: text("url"),
    thumbnailURL: text("thumbnail_u_r_l"),
    filename: text("filename"),
    mimeType: text("mime_type"),
    filesize: numeric("filesize"),
    width: numeric("width"),
    height: numeric("height"),
    focalX: numeric("focal_x"),
    focalY: numeric("focal_y"),
  },
  (columns) => ({
    media_updated_at_idx: index("media_updated_at_idx").on(columns.updatedAt),
    media_created_at_idx: index("media_created_at_idx").on(columns.createdAt),
    media_filename_idx: uniqueIndex("media_filename_idx").on(columns.filename),
  }),
);

export const services_blocks_hero = sqliteTable(
  "services_blocks_hero",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: text("id").primaryKey(),
    title: text("title").notNull(),
    description: text("description", { mode: "json" }).notNull(),
    image: integer("image_id").references(() => media.id, {
      onDelete: "set null",
    }),
    blockName: text("block_name"),
  },
  (columns) => ({
    _orderIdx: index("services_blocks_hero_order_idx").on(columns._order),
    _parentIDIdx: index("services_blocks_hero_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("services_blocks_hero_path_idx").on(columns._path),
    services_blocks_hero_image_idx: index("services_blocks_hero_image_idx").on(
      columns.image,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [services.id],
      name: "services_blocks_hero_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const services_blocks_info = sqliteTable(
  "services_blocks_info",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: text("id").primaryKey(),
    title: text("title").notNull(),
    description: text("description", { mode: "json" }).notNull(),
    blockName: text("block_name"),
  },
  (columns) => ({
    _orderIdx: index("services_blocks_info_order_idx").on(columns._order),
    _parentIDIdx: index("services_blocks_info_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("services_blocks_info_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [services.id],
      name: "services_blocks_info_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const services_blocks_about = sqliteTable(
  "services_blocks_about",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: text("id").primaryKey(),
    title: text("title").notNull(),
    description: text("description", { mode: "json" }).notNull(),
    image: integer("image_id")
      .notNull()
      .references(() => media.id, {
        onDelete: "set null",
      }),
    blockName: text("block_name"),
  },
  (columns) => ({
    _orderIdx: index("services_blocks_about_order_idx").on(columns._order),
    _parentIDIdx: index("services_blocks_about_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("services_blocks_about_path_idx").on(columns._path),
    services_blocks_about_image_idx: index(
      "services_blocks_about_image_idx",
    ).on(columns.image),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [services.id],
      name: "services_blocks_about_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const services_blocks_bullet_points_items = sqliteTable(
  "services_blocks_bullet_points_items",
  {
    _order: integer("_order").notNull(),
    _parentID: text("_parent_id").notNull(),
    id: text("id").primaryKey(),
    content: text("content", { mode: "json" }),
  },
  (columns) => ({
    _orderIdx: index("services_blocks_bullet_points_items_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("services_blocks_bullet_points_items_parent_id_idx").on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [services_blocks_bullet_points.id],
      name: "services_blocks_bullet_points_items_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const services_blocks_bullet_points = sqliteTable(
  "services_blocks_bullet_points",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: text("id").primaryKey(),
    title: text("title").notNull(),
    blockName: text("block_name"),
  },
  (columns) => ({
    _orderIdx: index("services_blocks_bullet_points_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("services_blocks_bullet_points_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("services_blocks_bullet_points_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [services.id],
      name: "services_blocks_bullet_points_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const services_blocks_process_items = sqliteTable(
  "services_blocks_process_items",
  {
    _order: integer("_order").notNull(),
    _parentID: text("_parent_id").notNull(),
    id: text("id").primaryKey(),
    title: text("title").notNull(),
    description: text("description", { mode: "json" }).notNull(),
  },
  (columns) => ({
    _orderIdx: index("services_blocks_process_items_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("services_blocks_process_items_parent_id_idx").on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [services_blocks_process.id],
      name: "services_blocks_process_items_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const services_blocks_process = sqliteTable(
  "services_blocks_process",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: text("id").primaryKey(),
    title: text("title").notNull(),
    blockName: text("block_name"),
  },
  (columns) => ({
    _orderIdx: index("services_blocks_process_order_idx").on(columns._order),
    _parentIDIdx: index("services_blocks_process_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("services_blocks_process_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [services.id],
      name: "services_blocks_process_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const services_blocks_treatments_items = sqliteTable(
  "services_blocks_treatments_items",
  {
    _order: integer("_order").notNull(),
    _parentID: text("_parent_id").notNull(),
    id: text("id").primaryKey(),
    title: text("title").notNull(),
    description: text("description", { mode: "json" }).notNull(),
  },
  (columns) => ({
    _orderIdx: index("services_blocks_treatments_items_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("services_blocks_treatments_items_parent_id_idx").on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [services_blocks_treatments.id],
      name: "services_blocks_treatments_items_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const services_blocks_treatments = sqliteTable(
  "services_blocks_treatments",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: text("id").primaryKey(),
    title: text("title").notNull(),
    blockName: text("block_name"),
  },
  (columns) => ({
    _orderIdx: index("services_blocks_treatments_order_idx").on(columns._order),
    _parentIDIdx: index("services_blocks_treatments_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("services_blocks_treatments_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [services.id],
      name: "services_blocks_treatments_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const services_blocks_benifits_items = sqliteTable(
  "services_blocks_benifits_items",
  {
    _order: integer("_order").notNull(),
    _parentID: text("_parent_id").notNull(),
    id: text("id").primaryKey(),
    content: text("content", { mode: "json" }).notNull(),
  },
  (columns) => ({
    _orderIdx: index("services_blocks_benifits_items_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("services_blocks_benifits_items_parent_id_idx").on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [services_blocks_benifits.id],
      name: "services_blocks_benifits_items_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const services_blocks_benifits = sqliteTable(
  "services_blocks_benifits",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: text("id").primaryKey(),
    title: text("title").notNull(),
    blockName: text("block_name"),
  },
  (columns) => ({
    _orderIdx: index("services_blocks_benifits_order_idx").on(columns._order),
    _parentIDIdx: index("services_blocks_benifits_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("services_blocks_benifits_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [services.id],
      name: "services_blocks_benifits_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const services_blocks_post_care_downtime = sqliteTable(
  "services_blocks_post_care_downtime",
  {
    _order: integer("_order").notNull(),
    _parentID: text("_parent_id").notNull(),
    id: text("id").primaryKey(),
    content: text("content", { mode: "json" }).notNull(),
  },
  (columns) => ({
    _orderIdx: index("services_blocks_post_care_downtime_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("services_blocks_post_care_downtime_parent_id_idx").on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [services_blocks_post_care.id],
      name: "services_blocks_post_care_downtime_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const services_blocks_post_care_post_care_items = sqliteTable(
  "services_blocks_post_care_post_care_items",
  {
    _order: integer("_order").notNull(),
    _parentID: text("_parent_id").notNull(),
    id: text("id").primaryKey(),
    content: text("content", { mode: "json" }).notNull(),
  },
  (columns) => ({
    _orderIdx: index("services_blocks_post_care_post_care_items_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index(
      "services_blocks_post_care_post_care_items_parent_id_idx",
    ).on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [services_blocks_post_care.id],
      name: "services_blocks_post_care_post_care_items_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const services_blocks_post_care = sqliteTable(
  "services_blocks_post_care",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: text("id").primaryKey(),
    downtimeTitle: text("downtime_title").notNull(),
    postCareTitle: text("post_care_title").notNull(),
    blockName: text("block_name"),
  },
  (columns) => ({
    _orderIdx: index("services_blocks_post_care_order_idx").on(columns._order),
    _parentIDIdx: index("services_blocks_post_care_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("services_blocks_post_care_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [services.id],
      name: "services_blocks_post_care_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const services_blocks_testimonials_items = sqliteTable(
  "services_blocks_testimonials_items",
  {
    _order: integer("_order").notNull(),
    _parentID: text("_parent_id").notNull(),
    id: text("id").primaryKey(),
    content: text("content", { mode: "json" }).notNull(),
  },
  (columns) => ({
    _orderIdx: index("services_blocks_testimonials_items_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("services_blocks_testimonials_items_parent_id_idx").on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [services_blocks_testimonials.id],
      name: "services_blocks_testimonials_items_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const services_blocks_testimonials = sqliteTable(
  "services_blocks_testimonials",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: text("id").primaryKey(),
    title: text("title").notNull(),
    blockName: text("block_name"),
  },
  (columns) => ({
    _orderIdx: index("services_blocks_testimonials_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("services_blocks_testimonials_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("services_blocks_testimonials_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [services.id],
      name: "services_blocks_testimonials_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const services_blocks_eligibility_items = sqliteTable(
  "services_blocks_eligibility_items",
  {
    _order: integer("_order").notNull(),
    _parentID: text("_parent_id").notNull(),
    id: text("id").primaryKey(),
    content: text("content", { mode: "json" }).notNull(),
  },
  (columns) => ({
    _orderIdx: index("services_blocks_eligibility_items_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("services_blocks_eligibility_items_parent_id_idx").on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [services_blocks_eligibility.id],
      name: "services_blocks_eligibility_items_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const services_blocks_eligibility = sqliteTable(
  "services_blocks_eligibility",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: text("id").primaryKey(),
    title: text("title").notNull(),
    blockName: text("block_name"),
  },
  (columns) => ({
    _orderIdx: index("services_blocks_eligibility_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("services_blocks_eligibility_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("services_blocks_eligibility_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [services.id],
      name: "services_blocks_eligibility_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const services_blocks_faq_items = sqliteTable(
  "services_blocks_faq_items",
  {
    _order: integer("_order").notNull(),
    _parentID: text("_parent_id").notNull(),
    id: text("id").primaryKey(),
    question: text("question").notNull(),
    answer: text("answer", { mode: "json" }).notNull(),
  },
  (columns) => ({
    _orderIdx: index("services_blocks_faq_items_order_idx").on(columns._order),
    _parentIDIdx: index("services_blocks_faq_items_parent_id_idx").on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [services_blocks_faq.id],
      name: "services_blocks_faq_items_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const services_blocks_faq = sqliteTable(
  "services_blocks_faq",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: text("id").primaryKey(),
    title: text("title").notNull(),
    blockName: text("block_name"),
  },
  (columns) => ({
    _orderIdx: index("services_blocks_faq_order_idx").on(columns._order),
    _parentIDIdx: index("services_blocks_faq_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("services_blocks_faq_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [services.id],
      name: "services_blocks_faq_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const services = sqliteTable(
  "services",
  {
    id: integer("id").primaryKey(),
    title: text("title").notNull(),
    slug: text("slug").notNull(),
    category: integer("category_id")
      .notNull()
      .references(() => service_categories.id, {
        onDelete: "set null",
      }),
    updatedAt: text("updated_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text("created_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => ({
    services_slug_idx: uniqueIndex("services_slug_idx").on(columns.slug),
    services_category_idx: index("services_category_idx").on(columns.category),
    services_updated_at_idx: index("services_updated_at_idx").on(
      columns.updatedAt,
    ),
    services_created_at_idx: index("services_created_at_idx").on(
      columns.createdAt,
    ),
  }),
);

export const service_categories = sqliteTable(
  "service_categories",
  {
    id: integer("id").primaryKey(),
    name: text("name").notNull(),
    type: text("type", { enum: ["skin", "hair", "laser"] }),
    updatedAt: text("updated_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text("created_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => ({
    service_categories_updated_at_idx: index(
      "service_categories_updated_at_idx",
    ).on(columns.updatedAt),
    service_categories_created_at_idx: index(
      "service_categories_created_at_idx",
    ).on(columns.createdAt),
  }),
);

export const payload_locked_documents = sqliteTable(
  "payload_locked_documents",
  {
    id: integer("id").primaryKey(),
    globalSlug: text("global_slug"),
    updatedAt: text("updated_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text("created_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => ({
    payload_locked_documents_global_slug_idx: index(
      "payload_locked_documents_global_slug_idx",
    ).on(columns.globalSlug),
    payload_locked_documents_updated_at_idx: index(
      "payload_locked_documents_updated_at_idx",
    ).on(columns.updatedAt),
    payload_locked_documents_created_at_idx: index(
      "payload_locked_documents_created_at_idx",
    ).on(columns.createdAt),
  }),
);

export const payload_locked_documents_rels = sqliteTable(
  "payload_locked_documents_rels",
  {
    id: integer("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: text("path").notNull(),
    usersID: integer("users_id"),
    mediaID: integer("media_id"),
    servicesID: integer("services_id"),
    "service-categoriesID": integer("service_categories_id"),
  },
  (columns) => ({
    order: index("payload_locked_documents_rels_order_idx").on(columns.order),
    parentIdx: index("payload_locked_documents_rels_parent_idx").on(
      columns.parent,
    ),
    pathIdx: index("payload_locked_documents_rels_path_idx").on(columns.path),
    payload_locked_documents_rels_users_id_idx: index(
      "payload_locked_documents_rels_users_id_idx",
    ).on(columns.usersID),
    payload_locked_documents_rels_media_id_idx: index(
      "payload_locked_documents_rels_media_id_idx",
    ).on(columns.mediaID),
    payload_locked_documents_rels_services_id_idx: index(
      "payload_locked_documents_rels_services_id_idx",
    ).on(columns.servicesID),
    payload_locked_documents_rels_service_categories_id_idx: index(
      "payload_locked_documents_rels_service_categories_id_idx",
    ).on(columns["service-categoriesID"]),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [payload_locked_documents.id],
      name: "payload_locked_documents_rels_parent_fk",
    }).onDelete("cascade"),
    usersIdFk: foreignKey({
      columns: [columns["usersID"]],
      foreignColumns: [users.id],
      name: "payload_locked_documents_rels_users_fk",
    }).onDelete("cascade"),
    mediaIdFk: foreignKey({
      columns: [columns["mediaID"]],
      foreignColumns: [media.id],
      name: "payload_locked_documents_rels_media_fk",
    }).onDelete("cascade"),
    servicesIdFk: foreignKey({
      columns: [columns["servicesID"]],
      foreignColumns: [services.id],
      name: "payload_locked_documents_rels_services_fk",
    }).onDelete("cascade"),
    "service-categoriesIdFk": foreignKey({
      columns: [columns["service-categoriesID"]],
      foreignColumns: [service_categories.id],
      name: "payload_locked_documents_rels_service_categories_fk",
    }).onDelete("cascade"),
  }),
);

export const payload_preferences = sqliteTable(
  "payload_preferences",
  {
    id: integer("id").primaryKey(),
    key: text("key"),
    value: text("value", { mode: "json" }),
    updatedAt: text("updated_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text("created_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => ({
    payload_preferences_key_idx: index("payload_preferences_key_idx").on(
      columns.key,
    ),
    payload_preferences_updated_at_idx: index(
      "payload_preferences_updated_at_idx",
    ).on(columns.updatedAt),
    payload_preferences_created_at_idx: index(
      "payload_preferences_created_at_idx",
    ).on(columns.createdAt),
  }),
);

export const payload_preferences_rels = sqliteTable(
  "payload_preferences_rels",
  {
    id: integer("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: text("path").notNull(),
    usersID: integer("users_id"),
  },
  (columns) => ({
    order: index("payload_preferences_rels_order_idx").on(columns.order),
    parentIdx: index("payload_preferences_rels_parent_idx").on(columns.parent),
    pathIdx: index("payload_preferences_rels_path_idx").on(columns.path),
    payload_preferences_rels_users_id_idx: index(
      "payload_preferences_rels_users_id_idx",
    ).on(columns.usersID),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [payload_preferences.id],
      name: "payload_preferences_rels_parent_fk",
    }).onDelete("cascade"),
    usersIdFk: foreignKey({
      columns: [columns["usersID"]],
      foreignColumns: [users.id],
      name: "payload_preferences_rels_users_fk",
    }).onDelete("cascade"),
  }),
);

export const payload_migrations = sqliteTable(
  "payload_migrations",
  {
    id: integer("id").primaryKey(),
    name: text("name"),
    batch: numeric("batch"),
    updatedAt: text("updated_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text("created_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => ({
    payload_migrations_updated_at_idx: index(
      "payload_migrations_updated_at_idx",
    ).on(columns.updatedAt),
    payload_migrations_created_at_idx: index(
      "payload_migrations_created_at_idx",
    ).on(columns.createdAt),
  }),
);

export const relations_users_sessions = relations(
  users_sessions,
  ({ one }) => ({
    _parentID: one(users, {
      fields: [users_sessions._parentID],
      references: [users.id],
      relationName: "sessions",
    }),
  }),
);
export const relations_users = relations(users, ({ many }) => ({
  sessions: many(users_sessions, {
    relationName: "sessions",
  }),
}));
export const relations_media = relations(media, () => ({}));
export const relations_services_blocks_hero = relations(
  services_blocks_hero,
  ({ one }) => ({
    _parentID: one(services, {
      fields: [services_blocks_hero._parentID],
      references: [services.id],
      relationName: "_blocks_hero",
    }),
    image: one(media, {
      fields: [services_blocks_hero.image],
      references: [media.id],
      relationName: "image",
    }),
  }),
);
export const relations_services_blocks_info = relations(
  services_blocks_info,
  ({ one }) => ({
    _parentID: one(services, {
      fields: [services_blocks_info._parentID],
      references: [services.id],
      relationName: "_blocks_info",
    }),
  }),
);
export const relations_services_blocks_about = relations(
  services_blocks_about,
  ({ one }) => ({
    _parentID: one(services, {
      fields: [services_blocks_about._parentID],
      references: [services.id],
      relationName: "_blocks_about",
    }),
    image: one(media, {
      fields: [services_blocks_about.image],
      references: [media.id],
      relationName: "image",
    }),
  }),
);
export const relations_services_blocks_bullet_points_items = relations(
  services_blocks_bullet_points_items,
  ({ one }) => ({
    _parentID: one(services_blocks_bullet_points, {
      fields: [services_blocks_bullet_points_items._parentID],
      references: [services_blocks_bullet_points.id],
      relationName: "items",
    }),
  }),
);
export const relations_services_blocks_bullet_points = relations(
  services_blocks_bullet_points,
  ({ one, many }) => ({
    _parentID: one(services, {
      fields: [services_blocks_bullet_points._parentID],
      references: [services.id],
      relationName: "_blocks_bullet-points",
    }),
    items: many(services_blocks_bullet_points_items, {
      relationName: "items",
    }),
  }),
);
export const relations_services_blocks_process_items = relations(
  services_blocks_process_items,
  ({ one }) => ({
    _parentID: one(services_blocks_process, {
      fields: [services_blocks_process_items._parentID],
      references: [services_blocks_process.id],
      relationName: "items",
    }),
  }),
);
export const relations_services_blocks_process = relations(
  services_blocks_process,
  ({ one, many }) => ({
    _parentID: one(services, {
      fields: [services_blocks_process._parentID],
      references: [services.id],
      relationName: "_blocks_process",
    }),
    items: many(services_blocks_process_items, {
      relationName: "items",
    }),
  }),
);
export const relations_services_blocks_treatments_items = relations(
  services_blocks_treatments_items,
  ({ one }) => ({
    _parentID: one(services_blocks_treatments, {
      fields: [services_blocks_treatments_items._parentID],
      references: [services_blocks_treatments.id],
      relationName: "items",
    }),
  }),
);
export const relations_services_blocks_treatments = relations(
  services_blocks_treatments,
  ({ one, many }) => ({
    _parentID: one(services, {
      fields: [services_blocks_treatments._parentID],
      references: [services.id],
      relationName: "_blocks_treatments",
    }),
    items: many(services_blocks_treatments_items, {
      relationName: "items",
    }),
  }),
);
export const relations_services_blocks_benifits_items = relations(
  services_blocks_benifits_items,
  ({ one }) => ({
    _parentID: one(services_blocks_benifits, {
      fields: [services_blocks_benifits_items._parentID],
      references: [services_blocks_benifits.id],
      relationName: "items",
    }),
  }),
);
export const relations_services_blocks_benifits = relations(
  services_blocks_benifits,
  ({ one, many }) => ({
    _parentID: one(services, {
      fields: [services_blocks_benifits._parentID],
      references: [services.id],
      relationName: "_blocks_benifits",
    }),
    items: many(services_blocks_benifits_items, {
      relationName: "items",
    }),
  }),
);
export const relations_services_blocks_post_care_downtime = relations(
  services_blocks_post_care_downtime,
  ({ one }) => ({
    _parentID: one(services_blocks_post_care, {
      fields: [services_blocks_post_care_downtime._parentID],
      references: [services_blocks_post_care.id],
      relationName: "downtime",
    }),
  }),
);
export const relations_services_blocks_post_care_post_care_items = relations(
  services_blocks_post_care_post_care_items,
  ({ one }) => ({
    _parentID: one(services_blocks_post_care, {
      fields: [services_blocks_post_care_post_care_items._parentID],
      references: [services_blocks_post_care.id],
      relationName: "postCareItems",
    }),
  }),
);
export const relations_services_blocks_post_care = relations(
  services_blocks_post_care,
  ({ one, many }) => ({
    _parentID: one(services, {
      fields: [services_blocks_post_care._parentID],
      references: [services.id],
      relationName: "_blocks_post-care",
    }),
    downtime: many(services_blocks_post_care_downtime, {
      relationName: "downtime",
    }),
    postCareItems: many(services_blocks_post_care_post_care_items, {
      relationName: "postCareItems",
    }),
  }),
);
export const relations_services_blocks_testimonials_items = relations(
  services_blocks_testimonials_items,
  ({ one }) => ({
    _parentID: one(services_blocks_testimonials, {
      fields: [services_blocks_testimonials_items._parentID],
      references: [services_blocks_testimonials.id],
      relationName: "items",
    }),
  }),
);
export const relations_services_blocks_testimonials = relations(
  services_blocks_testimonials,
  ({ one, many }) => ({
    _parentID: one(services, {
      fields: [services_blocks_testimonials._parentID],
      references: [services.id],
      relationName: "_blocks_testimonials",
    }),
    items: many(services_blocks_testimonials_items, {
      relationName: "items",
    }),
  }),
);
export const relations_services_blocks_eligibility_items = relations(
  services_blocks_eligibility_items,
  ({ one }) => ({
    _parentID: one(services_blocks_eligibility, {
      fields: [services_blocks_eligibility_items._parentID],
      references: [services_blocks_eligibility.id],
      relationName: "items",
    }),
  }),
);
export const relations_services_blocks_eligibility = relations(
  services_blocks_eligibility,
  ({ one, many }) => ({
    _parentID: one(services, {
      fields: [services_blocks_eligibility._parentID],
      references: [services.id],
      relationName: "_blocks_eligibility",
    }),
    items: many(services_blocks_eligibility_items, {
      relationName: "items",
    }),
  }),
);
export const relations_services_blocks_faq_items = relations(
  services_blocks_faq_items,
  ({ one }) => ({
    _parentID: one(services_blocks_faq, {
      fields: [services_blocks_faq_items._parentID],
      references: [services_blocks_faq.id],
      relationName: "items",
    }),
  }),
);
export const relations_services_blocks_faq = relations(
  services_blocks_faq,
  ({ one, many }) => ({
    _parentID: one(services, {
      fields: [services_blocks_faq._parentID],
      references: [services.id],
      relationName: "_blocks_faq",
    }),
    items: many(services_blocks_faq_items, {
      relationName: "items",
    }),
  }),
);
export const relations_services = relations(services, ({ one, many }) => ({
  category: one(service_categories, {
    fields: [services.category],
    references: [service_categories.id],
    relationName: "category",
  }),
  _blocks_hero: many(services_blocks_hero, {
    relationName: "_blocks_hero",
  }),
  _blocks_info: many(services_blocks_info, {
    relationName: "_blocks_info",
  }),
  _blocks_about: many(services_blocks_about, {
    relationName: "_blocks_about",
  }),
  "_blocks_bullet-points": many(services_blocks_bullet_points, {
    relationName: "_blocks_bullet-points",
  }),
  _blocks_process: many(services_blocks_process, {
    relationName: "_blocks_process",
  }),
  _blocks_treatments: many(services_blocks_treatments, {
    relationName: "_blocks_treatments",
  }),
  _blocks_benifits: many(services_blocks_benifits, {
    relationName: "_blocks_benifits",
  }),
  "_blocks_post-care": many(services_blocks_post_care, {
    relationName: "_blocks_post-care",
  }),
  _blocks_testimonials: many(services_blocks_testimonials, {
    relationName: "_blocks_testimonials",
  }),
  _blocks_eligibility: many(services_blocks_eligibility, {
    relationName: "_blocks_eligibility",
  }),
  _blocks_faq: many(services_blocks_faq, {
    relationName: "_blocks_faq",
  }),
}));
export const relations_service_categories = relations(
  service_categories,
  () => ({}),
);
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({ one }) => ({
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: "_rels",
    }),
    usersID: one(users, {
      fields: [payload_locked_documents_rels.usersID],
      references: [users.id],
      relationName: "users",
    }),
    mediaID: one(media, {
      fields: [payload_locked_documents_rels.mediaID],
      references: [media.id],
      relationName: "media",
    }),
    servicesID: one(services, {
      fields: [payload_locked_documents_rels.servicesID],
      references: [services.id],
      relationName: "services",
    }),
    "service-categoriesID": one(service_categories, {
      fields: [payload_locked_documents_rels["service-categoriesID"]],
      references: [service_categories.id],
      relationName: "service-categories",
    }),
  }),
);
export const relations_payload_locked_documents = relations(
  payload_locked_documents,
  ({ many }) => ({
    _rels: many(payload_locked_documents_rels, {
      relationName: "_rels",
    }),
  }),
);
export const relations_payload_preferences_rels = relations(
  payload_preferences_rels,
  ({ one }) => ({
    parent: one(payload_preferences, {
      fields: [payload_preferences_rels.parent],
      references: [payload_preferences.id],
      relationName: "_rels",
    }),
    usersID: one(users, {
      fields: [payload_preferences_rels.usersID],
      references: [users.id],
      relationName: "users",
    }),
  }),
);
export const relations_payload_preferences = relations(
  payload_preferences,
  ({ many }) => ({
    _rels: many(payload_preferences_rels, {
      relationName: "_rels",
    }),
  }),
);
export const relations_payload_migrations = relations(
  payload_migrations,
  () => ({}),
);

type DatabaseSchema = {
  users_sessions: typeof users_sessions;
  users: typeof users;
  media: typeof media;
  services_blocks_hero: typeof services_blocks_hero;
  services_blocks_info: typeof services_blocks_info;
  services_blocks_about: typeof services_blocks_about;
  services_blocks_bullet_points_items: typeof services_blocks_bullet_points_items;
  services_blocks_bullet_points: typeof services_blocks_bullet_points;
  services_blocks_process_items: typeof services_blocks_process_items;
  services_blocks_process: typeof services_blocks_process;
  services_blocks_treatments_items: typeof services_blocks_treatments_items;
  services_blocks_treatments: typeof services_blocks_treatments;
  services_blocks_benifits_items: typeof services_blocks_benifits_items;
  services_blocks_benifits: typeof services_blocks_benifits;
  services_blocks_post_care_downtime: typeof services_blocks_post_care_downtime;
  services_blocks_post_care_post_care_items: typeof services_blocks_post_care_post_care_items;
  services_blocks_post_care: typeof services_blocks_post_care;
  services_blocks_testimonials_items: typeof services_blocks_testimonials_items;
  services_blocks_testimonials: typeof services_blocks_testimonials;
  services_blocks_eligibility_items: typeof services_blocks_eligibility_items;
  services_blocks_eligibility: typeof services_blocks_eligibility;
  services_blocks_faq_items: typeof services_blocks_faq_items;
  services_blocks_faq: typeof services_blocks_faq;
  services: typeof services;
  service_categories: typeof service_categories;
  payload_locked_documents: typeof payload_locked_documents;
  payload_locked_documents_rels: typeof payload_locked_documents_rels;
  payload_preferences: typeof payload_preferences;
  payload_preferences_rels: typeof payload_preferences_rels;
  payload_migrations: typeof payload_migrations;
  relations_users_sessions: typeof relations_users_sessions;
  relations_users: typeof relations_users;
  relations_media: typeof relations_media;
  relations_services_blocks_hero: typeof relations_services_blocks_hero;
  relations_services_blocks_info: typeof relations_services_blocks_info;
  relations_services_blocks_about: typeof relations_services_blocks_about;
  relations_services_blocks_bullet_points_items: typeof relations_services_blocks_bullet_points_items;
  relations_services_blocks_bullet_points: typeof relations_services_blocks_bullet_points;
  relations_services_blocks_process_items: typeof relations_services_blocks_process_items;
  relations_services_blocks_process: typeof relations_services_blocks_process;
  relations_services_blocks_treatments_items: typeof relations_services_blocks_treatments_items;
  relations_services_blocks_treatments: typeof relations_services_blocks_treatments;
  relations_services_blocks_benifits_items: typeof relations_services_blocks_benifits_items;
  relations_services_blocks_benifits: typeof relations_services_blocks_benifits;
  relations_services_blocks_post_care_downtime: typeof relations_services_blocks_post_care_downtime;
  relations_services_blocks_post_care_post_care_items: typeof relations_services_blocks_post_care_post_care_items;
  relations_services_blocks_post_care: typeof relations_services_blocks_post_care;
  relations_services_blocks_testimonials_items: typeof relations_services_blocks_testimonials_items;
  relations_services_blocks_testimonials: typeof relations_services_blocks_testimonials;
  relations_services_blocks_eligibility_items: typeof relations_services_blocks_eligibility_items;
  relations_services_blocks_eligibility: typeof relations_services_blocks_eligibility;
  relations_services_blocks_faq_items: typeof relations_services_blocks_faq_items;
  relations_services_blocks_faq: typeof relations_services_blocks_faq;
  relations_services: typeof relations_services;
  relations_service_categories: typeof relations_service_categories;
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels;
  relations_payload_locked_documents: typeof relations_payload_locked_documents;
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels;
  relations_payload_preferences: typeof relations_payload_preferences;
  relations_payload_migrations: typeof relations_payload_migrations;
};

declare module "@payloadcms/db-sqlite" {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema;
  }
}
